
// 通用发送总指令
protocol SEND_MAIN {
    segment HEAD { parser: 'string', length:6, autovalue:'TSPD00' } //帧头标志
    segment LEN { parser: 'uint16>', autovalue: ByteSize(this) } //帧长度
    segment DA { parser:'uint8' } //目标地址,防护系统测试板卡1
    segment SA { parser:'uint8' } //源地址,主控单元
    segment CMD { parser:'uint8' } //帧命令类型 0x01握手 0x02初始化 
    segment BUFFER { parser:'string', length:this.LEN-12 }
    segment CHECK { parser:'uint8', autovalue:CheckCode(XOR_8, this.LEN) } //数据校验,帧长度开始（6字节后）至本字节前，所有字节异或结果
}

// 握手查询子协议
protocol send_hand {
    segment device_type { parser:'uint8', autovalue: 0 } //设备类型，1.通用仪表，2.启动系统，3.底盘电源系统，4.灭火系统，5.三防系统，6.烟雾弹/榴散弹控制系统，7.综电系统
    segment device_code  {parser:'uint16>', autovalue: 0 }//设备编号16位
}

//进行初始化,防护板卡一子协议
protocol send_init_fanghu1 {
    segment device_type {parser:'uint8' } //设备类型 1.通用仪表，2.启动系统，3.底盘电源系统，4.灭火系统，5.三防系统，6.烟雾弹/榴散弹控制系统，7.综电系统
    segment device_code {parser:'uint16>' }//设备编号16位
    segment test_code {parser:'uint8' } //测试项编号
    segment check_interval {parser:'uint16>',autovalue:0} //采样周期 精度1us 一般测试波形时，设置10us，其他测试设置1000us，以最终测试为准
    segment input_interval {parser:'uint16>',autovalue:0}//获取数据帧上报周期，精度1ms，一般测试波形时，设置1ms，其他测试设置100ms，以最终测试为准
    segments out00 {
        segment x2_3 {parser:'int16>',autovalue:0} //DA输出波峰电压值
        segment x2_5{parser:'int16>',autovalue:0}//DA输出波谷电压值
        segment x2_7 {parser:'uint8',autovalue:0}//周期时间
        segment x2_9 {parser:'uint8',autovalue:0}//高电平时间
    }
    segments out01 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out02 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out03 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out04 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out05 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out06 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out07 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out08 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out09 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out10 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out11 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out12 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out13 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out14 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out15 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    //线式传感器输出给定协议（10k/10M）输出给定协议
    segment x3_27_10 { parser:'uint4',autovalue:0}
    segment x3_29_10 { parser:'uint4',autovalue:0}
    segment x3_31_10 { parser:'uint4',autovalue:0}
    segment x3_33_10 { parser:'uint4',autovalue:0}
    segment x3_35_10 { parser:'uint4',autovalue:0}
    segment x3_39_10 { parser:'uint4',autovalue:0}
    //线式传感器输出给定协议（50k/10M）输出给定协议
    segment x3_27_50 { parser:'uint4',autovalue:0}
    segment x3_29_50 { parser:'uint4',autovalue:0}
    segment x3_31_50 { parser:'uint4',autovalue:0}
    segment x3_33_50 { parser:'uint4',autovalue:0}
    segment x3_35_50 { parser:'uint4',autovalue:0}
    segment x3_39_50 { parser:'uint4',autovalue:0}
    
    // 烟雾弹（非总线）在位输出给定协议 0：不给检测信号 1：给出检测信号
    segment x3_41 { parser:'uint1',autovalue:0}
    segment x3_43{ parser:'uint1',autovalue:0}
    segment x3_45 { parser:'uint1',autovalue:0}
    segment x3_47 { parser:'uint1',autovalue:0}
    segment x3_51 { parser:'uint1',autovalue:0}
    segment x3_53 { parser:'uint1',autovalue:0}
    segment x3_55 { parser:'uint1',autovalue:0}
    segment x3_57 { parser:'uint1',autovalue:0}
    segment x3_59 { parser:'uint1',autovalue:0}
    segment x3_63 { parser:'uint1',autovalue:0}
    segment x3_65 { parser:'uint1',autovalue:0}
    segment x3_67 { parser:'uint1',autovalue:0}
    segment x3_67__ { parser:'uint4',autovalue:0}
    // 电爆管阻值采样开关协议 0：禁能 1`：使能
    segment x2_53 {parser:'uint8',autovalue:0}

}


//进行初始化,防护板卡二子协议
protocol send_init_fanghu2 {
    segment device_type {parser:'uint8'} //设备类型 1.通用仪表，2.启动系统，3.底盘电源系统，4.灭火系统，5.三防系统，6.烟雾弹/榴散弹控制系统，7.综电系统
    segment device_code {parser:'uint16>'} //设备编号
    segment test_code {parser:'uint8'} //测试项编号
    segment check_interval {parser:'uint16>',autovalue:0} //采样周期 精度1us 一般测试波形时，设置10us，其他测试设置1000us，以最终测试为准
    segment input_interval {parser:'uint16>',autovalue:0}//获取数据帧上报周期，精度1ms，一般测试波形时，设置1ms，其他测试设置100ms，以最终测试为准
    // 80式电爆管驱动导通信号输出给定协议 0导通 1关断 F无效
    segment x2_40 {parser:'uint4',autovalue: 0}    
    segment x2_42 {parser:'uint4',autovalue: 0}
    segment x2_44 {parser:'uint4',autovalue: 0}
    segment x2_46 {parser:'uint4',autovalue: 0}
    segment x2_48 {parser:'uint4',autovalue: 0}
    segment x2_39 {parser:'uint4',autovalue: 0}
    segment x2_41 {parser:'uint4',autovalue: 0}
    segment x2_43 {parser:'uint4',autovalue: 0}

    // 85式电暴管驱动导通信号输出给定协议 0导通 1关断 F无效
    segment x2_64 {parser:'uint4',autovalue: 0}    
    segment x2_66 {parser:'uint4',autovalue: 0}
    segment x2_68 {parser:'uint4',autovalue: 0}
    segment x2_70 {parser:'uint4',autovalue: 0}
    segment x2_72 {parser:'uint4',autovalue: 0}
    segment x2_63 {parser:'uint4',autovalue: 0}
    segment x2_65 {parser:'uint4',autovalue: 0}
    segment x2_67 {parser:'uint4',autovalue: 0}

    //LKF-1 电暴管驱动导通信号输出给定协议 0导通 1关断 F无效
    segment x2_5 {parser:'uint4',autovalue: 0}    
    segment x2_3 {parser:'uint4',autovalue: 0}

    // LKF-1手动开关信号输出给定协议 0未按下  1按下 
    segment x2_9{parser:'uint1',autovalue: 0}
    segment x2_7{parser:'uint1',autovalue: 0}
    segment x2_7__  {parser:'uint6',autovalue:0}
 
    // 开关信号输出给定协议 0未按下  1按下 
    segment x2_52 {parser:'uint1',autovalue: 0}
    segment x2_54 {parser:'uint1',autovalue: 0}
    segment x2_56 {parser:'uint1',autovalue: 0}
    segment x2_58 {parser:'uint1',autovalue: 0}
    segment x2_58__ {parser:'uint4',autovalue: 0}

    // 线包驱动输出给定协议 0无驱动  1有驱动
    segment x2_6{parser:'uint1',autovalue: 0}
    segment x2_4{parser:'uint1',autovalue: 0}
    segment x2_4__ {parser:'uint6',autovalue: 0}
    // 灭火瓶压力信号输出给定协议 0灭火瓶满  1灭火瓶空
    segment x2_36{parser:'uint1',autovalue: 0}
    segment x2_34{parser:'uint1',autovalue: 0}
    segment x2_32{parser:'uint1',autovalue: 0}
    segment x2_30{parser:'uint1',autovalue: 0}
    segment x2_28{parser:'uint1',autovalue: 0}
    segment x2_31{parser:'uint1',autovalue: 0}
    segment x2_29{parser:'uint1',autovalue: 0}
    segment x2_27{parser:'uint1',autovalue: 0}

    // IO输出给定协议 0低电平 1高电平 其他：备用
    segment x3_40{parser:'uint4',autovalue: 0}
    segment x3_42 {parser:'uint4',autovalue: 0}
    segment x3_44 {parser:'uint4',autovalue: 0}
    segment x3_46 {parser:'uint4',autovalue: 0}
    segment x3_48 {parser:'uint4',autovalue: 0}
    segment x3_52 {parser:'uint4',autovalue: 0}
    segment x3_54 {parser:'uint4',autovalue: 0}
    segment x3_56 {parser:'uint4',autovalue: 0}
    segment x3_58 {parser:'uint4',autovalue: 0}
    segment x3_60 {parser:'uint4',autovalue: 0}

   //低电平输出给定协议   0低电平 1高电平 其他：备用
    
    segment x3_83 {parser:'uint4',autovalue: 0}
    segment x3_81 {parser:'uint4',autovalue: 0}
    segment x3_79 {parser:'uint4',autovalue: 0}
    segment x3_77 {parser:'uint4',autovalue: 0}
    segment x3_75 {parser:'uint4',autovalue: 0}
    segment x3_75__ {parser:'uint4',autovalue: 0}

    // 继电器控制协议 0断开 1吸合  其他 备用
    // segment x3_52 {parser:'uint4',autovalue:0}
    // segment x3_54 {parser:'uint4',autovalue:0}
    // segment x3_56 {parser:'uint4',autovalue:0}
    // segment x3_58 {parser:'uint4',autovalue:0}
    // segment x3_60 {parser:'uint4',autovalue:0}
    // segment x3_60__ {parser:'uint4',autovalue:0}

    segment x3_11 {parser:'uint4',autovalue:0}
    segment x3_9 {parser:'uint4',autovalue:0}
    segment x3_7 {parser:'uint4',autovalue:0}
    segment x3_5 {parser:'uint4',autovalue:0}
    segment x3_3 {parser:'uint4',autovalue:0}
    segment x3_3__ {parser:'uint4',autovalue:0}

    // 三防相关控制协议  0断开 1吸合  其他 备用
    segment x3_64 {parser:'uint4',autovalue:0}
    segment x3_66 {parser:'uint4',autovalue:0}
    segment x3_68 {parser:'uint4',autovalue:0}
    segment x3_70 {parser:'uint4',autovalue:0}
    segment x3_72 {parser:'uint4',autovalue:0}
    segment x3_72__ {parser:'uint4',autovalue:0}

    
}

//进行初始化,非总线采集板子协议
protocol send_init_nobus{
    segment device_type {parser:'uint8'} //设备类型 1.通用仪表，2.启动系统，3.底盘电源系统，4.灭火系统，5.三防系统，6.烟雾弹/榴散弹控制系统，7.综电系统
    segment device_code {parser:'uint16>'} //设备编号
    segment test_code {parser:'uint8'} //测试项编号
    segment check_interval {parser:'uint16>',autovalue:0} //采样周期 精度1us 一般测试波形时，设置10us，其他测试设置1000us，以最终测试为准
    segment input_interval {parser:'uint16>',autovalue:0}//获取数据帧上报周期，精度1ms，一般测试波形时，设置1ms，其他测试设置100ms，以最终测试为准
    // 表笔选择控制协议 0关断  1交流采样   2直流60v采样   3直流300V采样
    segment biaobi { parser: 'uint8',autovalue:0 }
    // 电池内组使用（能）协议 0禁用  1使能12V电池内阻检测  2使能24V电池内阻检测 
    segment dianzu_check { parser: 'uint8',autovalue:0 }
    // 仪表输入给定协议  电压值 精度为0.1V
    segment da_0 { parser: 'uint16>',autovalue:0 }
    segment da_1 { parser: 'uint16>',autovalue:0 }
    segment da_2 { parser: 'uint16>',autovalue:0 }
    segment da_3 { parser: 'uint16>',autovalue:0 }
    segment da_4 { parser: 'uint16>',autovalue:0 }
    segment da_5 { parser: 'uint16>',autovalue:0 }
    segment da_6 { parser: 'uint16>',autovalue:0 }
    segment da_7 { parser: 'uint16>',autovalue:0 }
    // 波形生成协议 
    segment zxb_c1_n1 { parser: 'uint8', autovalue:0} //0无输出   1正弦波  2方波
    segment zxb_c1_n2 { parser: 'uint8', autovalue:0} //0无输出   1通道1  2通道2  3通道3  4通道4
    segment fuzhi { parser: 'uint16>', autovalue:0}
    segment pinlv { parser: 'uint32>', autovalue:0}
    segment zhankongbi { parser: 'uint32>', autovalue:0}


    // 电阻接入控制协议 0断开  1接入  F无效
    segment r11_n0 { parser: 'uint4', autovalue:0}
    segment r11_n1 { parser: 'uint4', autovalue:0}
    segment r11_n2 { parser: 'uint4', autovalue:0}
    segment r11_n3 { parser: 'uint4', autovalue:0}
    segment r11_n4 { parser: 'uint4', autovalue:0}
    segment r11_n6 { parser: 'uint4', autovalue:0}
    segment r11_n6 { parser: 'uint4', autovalue:0}
    segment r11_n7 { parser: 'uint4', autovalue:0}

    // 可调电阻接入控制协议 控制4路电阻输出 精度1欧
    segment kt_dianzu_0 { parser: 'uint16>', autovalue:0}
    segment kt_dianzu_1 { parser: 'uint16>', autovalue:0}
    segment kt_dianzu_2 { parser: 'uint16>', autovalue:0}
    segment kt_dianzu_3 { parser: 'uint16>', autovalue:0}

    // 方波形生成协议 设置波形类型，4路IO控制分别为FBOUT1～FBOUT4 频率精度0.01 占空比精度0.01%
    segment fangbo_00 {parser:'uint32>', autovalue:0}
    segment fangbo_01 {parser:'uint32>', autovalue:0}
    segment fangbo_02 {parser:'uint32>', autovalue:0}
    segment fangbo_03 {parser:'uint32>', autovalue:0}
    segment fangbo_04 {parser:'uint32>', autovalue:0}
    segment fangbo_05 {parser:'uint32>', autovalue:0}
    segment fangbo_06 {parser:'uint32>', autovalue:0}
    segment fangbo_07 {parser:'uint32>', autovalue:0}

}

//控制指令下发协议0x30，防护类采集板1控制协议的子协议
protocol send_fanghu1{
    segment test_code {parser:'uint8',autovalue:0} //测试项编号
    segment test_state {parser:'uint8',autovalue:0} //测试项状态 0x01 测试中  0x02测试结束
    // 热电偶或者光电传感器输出给定协议，热电偶传感器设置为正常值 DA输出为0V，设置为故障时DA输出为-0.5V， 光电传感器设置为正常时DA输出为0V，设置为故障时DA输出为波风值5v，波估值为0v，周期100ms，高电平30ms脉冲，参数以实测为准
    // 电压精度0.1V为准，有符号16为整数，周期和高电平时间精度为1ms
    // 线式传感器 0正常，1报警，F无效
    segments out00 {
        segment x2_3 {parser:'int16>',autovalue:0} //DA输出波峰电压值
        segment x2_5{parser:'int16>',autovalue:0}//DA输出波谷电压值
        segment x2_7 {parser:'uint8',autovalue:0}//周期时间
        segment x2_9 {parser:'uint8',autovalue:0}//高电平时间
    }
    segments out01 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out02 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out03 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out04 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out05 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out06 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out07 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out08 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out09 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out10 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out11 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out12 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out13 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out14 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    segments out15 {
        segment x2_3 {parser:'int16>',autovalue:0}
        segment x2_5{parser:'int16>',autovalue:0}
        segment x2_7 {parser:'uint8',autovalue:0}
        segment x2_9 {parser:'uint8',autovalue:0}
    }
    // segment x3_52 {parser:'uint8',autovalue:0}
    //线式传感器输出给定协议（10k/10M）输出给定协议
    segment x3_27_10 { parser:'uint4',autovalue:0}
    segment x3_29_10 { parser:'uint4',autovalue:0}
    segment x3_31_10 { parser:'uint4',autovalue:0}
    segment x3_33_10 { parser:'uint4',autovalue:0}
    segment x3_35_10 { parser:'uint4',autovalue:0}
    segment x3_39_10 { parser:'uint4',autovalue:0}
    //线式传感器输出给定协议（50k/10M）输出给定协议
    segment x3_27_50 { parser:'uint4',autovalue:0}
    segment x3_29_50 { parser:'uint4',autovalue:0}
    segment x3_31_50 { parser:'uint4',autovalue:0}
    segment x3_33_50 { parser:'uint4',autovalue:0}
    segment x3_35_50 { parser:'uint4',autovalue:0}
    segment x3_39_50 { parser:'uint4',autovalue:0}
    
    // 烟雾弹（非总线）在位输出给定协议 0：不给检测信号 1：给出检测信号
    segment x3_41 { parser:'uint1',autovalue:0}
    segment x3_43 { parser:'uint1',autovalue:0}
    segment x3_45 { parser:'uint1',autovalue:0}
    segment x3_47 { parser:'uint1',autovalue:0}
    segment x3_51 { parser:'uint1',autovalue:0}
    segment x3_53 { parser:'uint1',autovalue:0}
    segment x3_55 { parser:'uint1',autovalue:0}
    segment x3_57 { parser:'uint1',autovalue:0}
    segment x3_59 { parser:'uint1',autovalue:0}
    segment x3_63 { parser:'uint1',autovalue:0}
    segment x3_65 { parser:'uint1',autovalue:0}
    segment x3_67 { parser:'uint1',autovalue:0}
    segment x3_67__ { parser:'uint4',autovalue:0}
    // 电爆管阻值采样开关协议 0：禁能 1`：使能
    segment x2_53 {parser:'uint8',autovalue:0}
}

//控制指令下发协议0x30，防护类采集板2控制协议子协议
protocol  send_fanghu2 {
    segment test_code {parser:'uint8',autovalue: 0} //测试项编号
    segment test_state {parser:'uint8',autovalue: 0} //测试项状态 0x01 测试中  0x02测试结束
    // segment x2_22 {parser:'uint8',autovalue: 0} 
    // 80式电爆管驱动导通信号输出给定协议 0导通 1关断 F无效
    segment x2_40 {parser:'uint4',autovalue: 0}    
    segment x2_42 {parser:'uint4',autovalue: 0}
    segment x2_44 {parser:'uint4',autovalue: 0}
    segment x2_46 {parser:'uint4',autovalue: 0}
    segment x2_48 {parser:'uint4',autovalue: 0}
    segment x2_39 {parser:'uint4',autovalue: 0}
    segment x2_41 {parser:'uint4',autovalue: 0}
    segment x2_43 {parser:'uint4',autovalue: 0}

    // 85式电暴管驱动导通信号输出给定协议 0导通 1关断 F无效
    segment x2_64 {parser:'uint4',autovalue: 0}    
    segment x2_66 {parser:'uint4',autovalue: 0}
    segment x2_68 {parser:'uint4',autovalue: 0}
    segment x2_70 {parser:'uint4',autovalue: 0}
    segment x2_72 {parser:'uint4',autovalue: 0}
    segment x2_63 {parser:'uint4',autovalue: 0}
    segment x2_65 {parser:'uint4',autovalue: 0}
    segment x2_67 {parser:'uint4',autovalue: 0}

    //LKF-1 电暴管驱动导通信号输出给定协议 0导通 1关断 F无效
    segment x2_5 {parser:'uint4',autovalue: 0}    
    segment x2_3 {parser:'uint4',autovalue: 0}

    // LKF-1手动开关信号输出给定协议 0未按下  1按下 
    segment x2_9{parser:'uint1',autovalue: 0}
    segment x2_7{parser:'uint1',autovalue: 0}
    segment x2_7__  {parser:'uint6',autovalue:0}
 
    // 开关信号输出给定协议 0未按下  1按下 
    segment x2_52 {parser:'uint4',autovalue: 0}
    segment x2_54 {parser:'uint4',autovalue: 0}
    segment x2_56 {parser:'uint4',autovalue: 0}
    segment x2_58 {parser:'uint4',autovalue: 0}
    // segment x2_58__ {parser:'uint4',autovalue: 0}

    // 线包驱动输出给定协议 0无驱动  1有驱动
    segment x2_6{parser:'uint1',autovalue: 0}
    segment x2_4{parser:'uint1',autovalue: 0}
    segment x2_4__{parser:'uint6',autovalue: 0}


    // 灭火瓶压力信号输出给定协议 0灭火瓶满  1灭火瓶空 F表示无效
    segment x2_36 {parser:'uint4',autovalue: 0}
    segment x2_34 {parser:'uint4',autovalue: 0}
    segment x2_32 {parser:'uint4',autovalue: 0}
    segment x2_30 {parser:'uint4',autovalue: 0}
    segment x2_28 {parser:'uint4',autovalue: 0}
    segment x2_31 {parser:'uint4',autovalue: 0}
    segment x2_29 {parser:'uint4',autovalue: 0}
    segment x2_27 {parser:'uint4',autovalue: 0}

    // IO输出给定协议 0低电平 1高电平 其他：备用
    segment x3_40 {parser:'uint4',autovalue: 0}
    segment x3_42 {parser:'uint4',autovalue: 0}
    segment x3_44 {parser:'uint4',autovalue: 0}
    segment x3_46 {parser:'uint4',autovalue: 0}
    segment x3_48 {parser:'uint4',autovalue: 0}
    segment x3_52 {parser:'uint4',autovalue: 0}
    segment x3_54 {parser:'uint4',autovalue: 0}
    segment x3_56 {parser:'uint4',autovalue: 0}
    segment x3_58 {parser:'uint4',autovalue: 0}
    segment x3_60 {parser:'uint4',autovalue: 0}

   //低电平输出给定协议   0低电平 1高电平 其他：备用
    
    segment x3_83 {parser:'uint4',autovalue: 0}
    segment x3_81 {parser:'uint4',autovalue: 0}
    segment x3_79 {parser:'uint4',autovalue: 0}
    segment x3_77 {parser:'uint4',autovalue: 0}
    segment x3_75 {parser:'uint4',autovalue: 0}
    segment x3_75__ {parser:'uint4',autovalue: 0}

    // 继电器控制协议 0断开 1吸合  其他 备用
    // segment x3_52 {parser:'uint4',autovalue:0}
    // segment x3_54 {parser:'uint4',autovalue:0}
    // segment x3_56 {parser:'uint4',autovalue:0}
    // segment x3_58 {parser:'uint4',autovalue:0}
    // segment x3_60 {parser:'uint4',autovalue:0}
    // segment x3_60__ {parser:'uint4',autovalue:0}

    segment x3_11 {parser:'uint4',autovalue:0}
    segment x3_9 {parser:'uint4',autovalue:0}
    segment x3_7 {parser:'uint4',autovalue:0}
    segment x3_5 {parser:'uint4',autovalue:0}
    segment x3_3 {parser:'uint4',autovalue:0}
    segment x3_3__ {parser:'uint4',autovalue:0}

    // 三防相关控制协议  0断开 1吸合  其他 备用
    segment x3_64 {parser:'uint4',autovalue:0}
    segment x3_66 {parser:'uint4',autovalue:0}
    segment x3_68 {parser:'uint4',autovalue:0}
    segment x3_70 {parser:'uint4',autovalue:0}
    segment x3_72 {parser:'uint4',autovalue:0}
    segment x3_72__ {parser:'uint4',autovalue:0}

}

// 非总线测试类协议 控制指令下发协议0x30，子协议
protocol send_nobus {
    
    segment test_code {parser:'uint8',autovalue:0} //测试项编号
    segment test_state {parser:'uint8',autovalue:0} //测试项状态 0x01 测试中  0x02测试结束
    // 表笔选择控制协议 0关断  1交流采样   2直流60v采样   3直流300V采样
    segment biaobi { parser: 'uint8',autovalue:0 }
    // 电池内组使用（能）协议 0禁用  1使能12V电池内阻检测  2使能24V电池内阻检测 
    segment dianzu_check { parser: 'uint8',autovalue:0 }
    // 仪表输入给定协议  电压值 精度为0.01V 输出范围-30~30
    segment da_0 { parser: 'int16>',autovalue:0 }
    segment da_1 { parser: 'int16>',autovalue:0 }
    segment da_2 { parser: 'int16>',autovalue:0 }
    segment da_3 { parser: 'int16>',autovalue:0 }
    segment da_4 { parser: 'int16>',autovalue:0 }
    segment da_5 { parser: 'int16>',autovalue:0 }
    segment da_6 { parser: 'int16>',autovalue:0 }
    segment da_7 { parser: 'int16>',autovalue:0 }
    // 波形生成协议 
    segment zxb_c1_n1 { parser: 'uint8', autovalue:0} //0无输出   1正弦波  2方波
    segment zxb_c1_n2 { parser: 'uint8', autovalue:0} //0无输出   1通道1  2通道2  3通道3  4通道4
    segment fuzhi { parser: 'uint16>', autovalue:0}
    segment pinlv { parser: 'uint32>', autovalue:0}
    segment zhankongbi { parser: 'uint32>', autovalue:0}


    // 电阻接入控制协议 0断开  1接入  F无效
    segment r11_n0 { parser: 'uint4', autovalue:0}
    segment r11_n1 { parser: 'uint4', autovalue:0}
    segment r11_n2 { parser: 'uint4', autovalue:0}
    segment r11_n3 { parser: 'uint4', autovalue:0}
    segment r11_n4 { parser: 'uint4', autovalue:0}
    segment r11_n6 { parser: 'uint4', autovalue:0}
    segment r11_n6 { parser: 'uint4', autovalue:0}
    segment r11_n7 { parser: 'uint4', autovalue:0}

    // 可调电阻接入控制协议 控制4路电阻输出 精度1欧
    segment kt_dianzu_0 { parser: 'uint16>', autovalue:0}
    segment kt_dianzu_1 { parser: 'uint16>', autovalue:0}
    segment kt_dianzu_2 { parser: 'uint16>', autovalue:0}
    segment kt_dianzu_3 { parser: 'uint16>', autovalue:0}
    
    // 方波形生成协议 设置波形类型，4路IO控制分别为FBOUT1～FBOUT4 频率精度0.01 占空比精度0.01%
    segment fangbo_00 {parser:'uint32>', autovalue:0}
    segment fangbo_01 {parser:'uint32>', autovalue:0}
    segment fangbo_02 {parser:'uint32>', autovalue:0}
    segment fangbo_03 {parser:'uint32>', autovalue:0}
    segment fangbo_04 {parser:'uint32>', autovalue:0}
    segment fangbo_05 {parser:'uint32>', autovalue:0}
    segment fangbo_06 {parser:'uint32>', autovalue:0}
    segment fangbo_07 {parser:'uint32>', autovalue:0}
}


//主控的单元下发AD校准指令0x03（子协议）
protocol send_check_ad {
    segment path {parser:'uint8',autovalue: 0} //数据内容 0：AD通道1， 1：AD通道2，2：AD通道3 
    segment data {parser:'uint8',autovalue:0} //标准段
}

//主控的单元下发DA校准指令0x04（子协议）
protocol send_check_da {
    segment path {parser:'uint8',autovalue: 0} //数据内容 0：AD通道1， 1：AD通道2，2：AD通道3 ......
    segment data {parser: 'uint8',autovalue:0} //标准段
    segment type {parser: 'uint8',autovalue:0} //0 减少 1增加
    segment bit_max {parser:'uint8',autovalue:0}//调整量高8位
    segment bit_min {parser:'uint8',autovalue:0}//调整量低8位
}

//通信类测试协议 CAN协议
protocol send_can {
    segment type {parser:'uint8',autovalue:0x01} //通讯类型，0x01.CAN ，0x02.FlexRay，0x03.MIC，0x04.1553B，0x05USART
    segment path {parser:'uint8',autovalue:0}//通道 0x01通道1  0x02通道2
    segment data_type {parser:'uint8',autovalue:0}//数据类型 0x01 标准帧 0x02扩展帧
    segment bps {parser:'uint16',autovalue:0}//波特率单位K 0x00FA 250K  0x01F4 500K
    segment data_long {parser:'uint8',autovalue:0} //数据长度
    //数据id
    segment id_1 {parser: 'uint8',autovalue:0}
    segment id_2 {parser: 'uint8',autovalue:0}
    segment id_3 {parser: 'uint8',autovalue:0}
    segment id_4 {parser: 'uint8',autovalue:0}
    // 数据字节
    segment data_len {parser: 'uint32',autovalue:0} //协议给的字节长度不确定，暂定4个字节
}

// FlexRay协议
protocol send_flexray {
    segment type {parser:'uint8', autovalue:0x01} //通讯类型，0x01.CAN ，0x02.FlexRay，0x03.MIC，0x04.1553B，0x05USART
    segment path {parser:'uint8', autovalue:0}//通道 0x01通道1  0x02通道2
    segment data_type {parser:'uint8', autovalue:0}//数据类型 0x01 标准帧 0x02扩展帧
    segment bps {parser:'uint8', autovalue:0}//波特率单位K 0x01 10M

    segment id {parser:'uint10', autovalue:0} //帧id
    segment start_bit {parser: 'uint1', autovalue:0}//启动帧指示位
    segment tb_bit {parser: 'uint1',autovalue:0}//同步帧指示位
    segment no_bit {parser: 'uint1',autovalue:0}//空帧指示位
    segment no_bit__ {parser: 'uint3',autovalue:0}
   
    segment data_long {parser:'uint8',autovalue:0} //指示负载区字节长度
    segment interval_count {parser: 'uint8',autovalue:0 } //周期计数
    segment data {parser: 'uint8', autovalue:0}//负载数据区域


}

protocol send_mic {
    segment type {parser:'uint8', autovalue:0x01} //通讯类型，0x01.CAN ，0x02.FlexRay，0x03.MIC，0x04.1553B，0x05USART
    segment path {parser:'uint8', autovalue:0}//通道 0x01通道1  0x02通道2
    segment data_type {parser:'uint8', autovalue:0}//数据类型 0x01 标准帧 0x02扩展帧
    segment bps {parser:'uint8', autovalue:0}//波特率单位K 0x01 2M

    
}