//通用接收总协议
protocol RECV_MAIN{
    segment HEAD { parser: 'string' ,length:6 ,autovalue:'TSPD00'} //帧头标志
    segment LEN { parser: 'uint16>',autovalue: ByteSize(this)} //帧长度
    segment DA {parser:'uint8',autovalue: 0} //目标地址,
    segment SA {parser:'uint8',autovalue: 0} //源地址,0x02：仪表校验板卡，0x03：防护系统测试板卡1,0x04防护系统测试板卡2,0x05：通讯板卡1,0x06：通讯板卡2
    segment CMD {parser:'uint8',autovalue:0 } //帧命令类型 ，0x01：握手，0x02初始化
    segment BUFFER {parser:'string',length:this.LEN - 12 } //防护类采集板卡1：106字节 防护类采集板卡2：26字节 
    segment CHECK {parser:'uint8',autovalue:CheckCode(CRC_8, this.LEN)} //数据校验,帧长度开始（6字节后）至本字节前，所有字节异或结果
}

//握手响应指令接收子协议
protocol recv_hand {
    segment da {parser:'uint8',autovalue:0} //DA数量
    segment do {parser:'uint8',autovalue:0} //IO输出数量
    segment ad {parser:'uint8',autovalue:0} //AD数量
    segment di {parser:'uint8',autovalue:0} //IO输入数量
    segment can {parser:'uint8',autovalue:0} //CAN数量
    segment b1553 {parser:'uint8',autovalue:0} //1553B数量
    segment mic {parser:'uint8',autovalue:0} //MIC数量
    segment flexray {parser:'uint8',autovalue:0} // FlexRay数量
    segment usart {parser:'uint8',autovalue:0}  //USART数量
    segment result {parser:'uint8',autovalue:0} //上报自检结果【0x01成功，0x02失败】

}

// 初始化响应指令子协议
protocol recv_init {
    segment device_type {parser:'uint8',autovalue:0} //设备类型
    segment device_code {parser:'uint16>',autovalue:0} //设备编号
    segment init_code {parser:'uint8',autovalue:0} //初始化编号
    segment result {parser:'uint8',autovalue:0} //初始化状态 0初始化中，1完成，2失败
 
}

// 防护板卡2的接收子协议
protocol recv_fanghu2{
    // 80式电暴管驱动导通信号输出控制标准协议 0导通 1关断
    segment x2_40 {parser:'uint1',autovalue: 0}
    segment x2_42 {parser:'uint1',autovalue: 0}
    segment x2_44 {parser:'uint1',autovalue: 0}
    segment x2_46 {parser:'uint1',autovalue: 0}
    segment x2_48 {parser:'uint1',autovalue: 0}
    segment x2_39 {parser:'uint1',autovalue: 0}
    segment x2_41 {parser:'uint1',autovalue: 0}
    segment x2_43 {parser:'uint1',autovalue: 0}
    // 85式电暴管驱动导通信号输出控制标准协议 0导通 1关断
    segment x2_64{parser:'uint1',autovalue: 0}
    segment x2_66{parser:'uint1',autovalue: 0}
    segment x2_68{parser:'uint1',autovalue: 0}
    segment x2_70{parser:'uint1',autovalue: 0}
    segment x2_72{parser:'uint1',autovalue: 0}
    segment x2_63{parser:'uint1',autovalue: 0}
    segment x2_65{parser:'uint1',autovalue: 0}
    segment x2_67{parser:'uint1',autovalue: 0}
    //LKF-1 式电暴管驱动导通信号输出控制标准协议 0导通 1关断
    segment x2_5 {parser:'uint1',autovalue: 0}
    segment x2_3 {parser:'uint1',autovalue: 0}
    segment x2_3__{parser:'uint6',autovalue: 0}

    // 80式电暴管驱动信号输出采样协议 0无驱动 1有驱动
    segment x2_24{parser:'uint1',autovalue: 0}
    segment x2_22{parser:'uint1',autovalue: 0}
    segment x2_20{parser:'uint1',autovalue: 0}
    segment x2_18{parser:'uint1',autovalue: 0}
    segment x2_16{parser:'uint1',autovalue: 0}
    segment x2_23{parser:'uint1',autovalue: 0}
    segment x2_21{parser:'uint1',autovalue: 0}
    segment x2_19{parser:'uint1',autovalue: 0}
    // 85式电暴管驱动信号输出采样协议 0无驱动 1有驱动
    segment x2_79{parser:'uint1',autovalue: 0}
    segment x2_81{parser:'uint1',autovalue: 0}
    segment x2_83{parser:'uint1',autovalue: 0}
    segment x2_87{parser:'uint1',autovalue: 0}
    segment x2_89{parser:'uint1',autovalue: 0}
    segment x2_91{parser:'uint1',autovalue: 0}
    segment x2_93{parser:'uint1',autovalue: 0}
    segment x2_95{parser:'uint1',autovalue: 0}
    // LKF-1式电暴管驱动信号输出采样协议 0无驱动 1有驱动
    segment x2_8{parser:'uint1',autovalue: 0}
    segment x2_10{parser:'uint1',autovalue: 0}
    segment x2_10__{parser:'uint6',autovalue: 0}
   

    // io输入信号采样协议 0正常 1报警 其他 备用
    segment x3_4 {parser:'uint4',autovalue: 0}
    segment x3_6 {parser:'uint4',autovalue: 0}
    segment x3_8 {parser:'uint4',autovalue: 0}
    segment x3_10 {parser:'uint4',autovalue: 0}
    segment x3_12 {parser:'uint4',autovalue: 0}
    segment x3_16 {parser:'uint4',autovalue: 0}
    segment x3_18 {parser:'uint4',autovalue: 0}
    segment x3_20 {parser:'uint4',autovalue: 0}
    segment x3_22 {parser:'uint4',autovalue: 0}
    segment x3_24 {parser:'uint4',autovalue: 0}
    segment x3_28 {parser:'uint4',autovalue: 0}
    segment x3_30 {parser:'uint4',autovalue: 0}
    segment x3_32 {parser:'uint4',autovalue: 0}
    segment x3_34 {parser:'uint4',autovalue: 0}
    segment x3_36 {parser:'uint4',autovalue: 0}
    segment x3_36__ {parser:'uint4',autovalue: 0}
    // 预留开关信号输入协议 0低电平 1高电平
    segment x3_76 {parser:'uint1',autovalue: 1}
    segment x3_78 {parser:'uint1',autovalue: 0}
    segment x3_80 {parser:'uint1',autovalue: 0}
    segment x3_82 {parser:'uint1',autovalue: 0}
    segment x3_84 {parser:'uint1',autovalue: 0}
    segment x3_84__  {parser:'uint3',autovalue: 0}

    // 警报器输出采样协议  0正常 1 报警
    segment x3_59 { parser: 'uint1',autovalue:0 }
    segment x3_59__ { parser: 'uint7',autovalue:0 }


}
// XSF_1/现实传感器
// 防护板卡1的接收子协议
protocol recv_fanghu1{
    // 线式传感器输出采样协议 线式传感器输出阻值，单位千欧，精确到1千欧
    segment xsad_1 { parser: 'uint16>',autovalue:0 }
    segment xsad_2 { parser: 'uint16>',autovalue:0 }
    segment xsad_3 { parser: 'uint16>',autovalue:0 }
    segment xsad_4 { parser: 'uint16>',autovalue:0 }
    segment xsad_5 { parser: 'uint16>',autovalue:0 }
    segment xsad_6 { parser: 'uint16>',autovalue:0 }
    segment xsad_7 { parser: 'uint16>',autovalue:0 }
    segment xsad_8 { parser: 'uint16>',autovalue:0 }

    // 电压采样（比如热电欧传感器输出）协议 采样电压值 单位伏特 精度到0.1V
    segment ad_00 {  parser: 'int16>',autovalue:0 }
    segment ad_01 {  parser: 'int16>',autovalue:0 }
    segment ad_02 {  parser: 'int16>',autovalue:0 }
    segment ad_03 {  parser: 'int16>',autovalue:0 }
    segment ad_04 {  parser: 'int16>',autovalue:0 }
    segment ad_05 {  parser: 'int16>',autovalue:0 }
    segment ad_06 {  parser: 'int16>',autovalue:0 }
    segment ad_07 {  parser: 'int16>',autovalue:0 }
    segment ad_08 {  parser: 'int16>',autovalue:0 }
    segment ad_09 {  parser: 'int16>',autovalue:0 }
    segment ad_10 {  parser: 'int16>',autovalue:0 }
    segment ad_11 {  parser: 'int16>',autovalue:0 }
    segment ad_12 {  parser: 'int16>',autovalue:0 }
    segment ad_13 {  parser: 'int16>',autovalue:0 }
    segment ad_14 {  parser: 'int16>',autovalue:0 }
    segment ad_15 {  parser: 'int16>',autovalue:0 }

    // 烟雾单（非总线）在位输入检测协议
    segment x3_69 { parser: 'uint1',autovalue:0 }
    segment x3_71 { parser: 'uint1',autovalue:0 }
    segment x3_75 { parser: 'uint1',autovalue:0 }
    segment x3_77 { parser: 'uint1',autovalue:0 }
    segment x3_79 { parser: 'uint1',autovalue:0 }
    segment x3_81 { parser: 'uint1',autovalue:0 }
    segment x3_83 { parser: 'uint1',autovalue:0 }
    segment x3_89 { parser: 'uint1',autovalue:0 }
    segment x3_91 { parser: 'uint1',autovalue:0 }
    segment x3_93 { parser: 'uint1',autovalue:0 }
    segment x3_95 { parser: 'uint1',autovalue:0 }
    segment x3_4 { parser: 'uint1',autovalue:0 }
    segment x3_4__ { parser: 'uint4', autovalue:0 }

    // 电爆管阻值采样协议
    segment adin7 { parser: 'uint16>', autovalue:0 }

    // 光电传感器输出采样协议 0正常 1故障
    segment x3_3 { parser: 'uint1', autovalue:0 }
    segment x3_5 { parser: 'uint1', autovalue:0 }
    segment x3_7 { parser: 'uint1', autovalue:0 }
    segment x3_9 { parser: 'uint1', autovalue:0 }
    segment x3_11 { parser: 'uint1', autovalue:0 }
    segment x3_15 { parser: 'uint1', autovalue:0 }
    segment x3_17 { parser: 'uint1', autovalue:0 }
    segment x3_19 { parser: 'uint1', autovalue:0 }


}

// 防护类采集板时间数据 子协议
protocol recv_time {
    segment device_type {parser:'uint8',autovalue:0} //设备类型
    segment device_code {parser:'uint16>',autovalue:0} //设备编号
    segment test_code {parser:'uint8',autovalue:0}
    //表示时间数据的固定个数为20个，根据真值表确定时间测试的个数与意义
    segment t00 {parser:'uint16>',autovalue:0}
    segment t01 {parser:'uint16>',autovalue:0}
    segment t02 {parser:'uint16>',autovalue:0}
    segment t03 {parser:'uint16>',autovalue:0}
    segment t04 {parser:'uint16>',autovalue:0}
    segment t05 {parser:'uint16>',autovalue:0}
    segment t06 {parser:'uint16>',autovalue:0}
    segment t07 {parser:'uint16>',autovalue:0}
    segment t08 {parser:'uint16>',autovalue:0}
    segment t09 {parser:'uint16>',autovalue:0}
    segment t10 {parser:'uint16>',autovalue:0}
    segment t11 {parser:'uint16>',autovalue:0}
    segment t12 {parser:'uint16>',autovalue:0}
    segment t13 {parser:'uint16>',autovalue:0}
    segment t14 {parser:'uint16>',autovalue:0}
    segment t15 {parser:'uint16>',autovalue:0}
    segment t16 {parser:'uint16>',autovalue:0}
    segment t17 {parser:'uint16>',autovalue:0}
    segment t18 {parser:'uint16>',autovalue:0}
    segment t19 {parser:'uint16>',autovalue:0}
}



// 非总线测试类协议 控制指令下发协议0x30，仪表校验采集板卡状态数据子协议
protocol recv_caiji {
    // 共19个字节
    // 交流电压采样协议 精度0.1V
    segment out_ac { parser: 'int16>',autovalue:0  }
    // 直流电压采样协议 精度0.1V
    segment adc_300 { parser: 'uint16>',autovalue:0  }
    segment adc_60 { parser: 'uint16>',autovalue:0  }
    // 电阻采样协议 精度0.1欧
    segment dzjc_ad { parser: 'uint16>',autovalue:0  }
    // 电流采样协议 精度0.1A
    segment i_ad { parser: 'uint16>',autovalue:0  }
    // 温度电阻采样协议 有符号可表示负值
    segment ad_temp { parser: 'int16>',autovalue:0  }
    // 电池内阻协议
    segment state { parser: 'uint8',autovalue:0 } //0初始状态 1检测中  2检测完成   3电池夹链接异常
    segment vot_sgi1 { parser: 'uint16>',autovalue:0 } //Vot_SIG+端电压值 精度0.01V
    segment vot_sgi0 { parser: 'uint16>',autovalue:0 } //Vot_SIG-端电压值 精度0.01V
    segment battery_r { parser: 'uint16>',autovalue:0 } //电池内阻 精度1毫欧
    segment vot_bat_v { parser: 'uint16>', autovalue:0} //电池电压值 精度0.01V
    segment vot_bat_diff {parser: 'uint16>', autovalue:0} //AD原始值, 给定pwm后,电池电压差

}

// 非总线测试类协议 控制指令下发协议0x30，仪表校验采集板卡状态数据（用于波形显示）子协议
protocol recv_nobus {
    segment boxing { parser: 'uint8',autovalue:0 } //0x01交流电压  0x02直流电压（60V） 0x03直流电压（300V）0x04电流
 
    segments data_text[100] {
        segment time { parser: 'uint64>', autovalue:0}//时间戳 精度1us
        segment data { parser: 'int16>',autovalue:0 } //采样数据 根据章节5.1表笔选择
    } //采样内容 每帧包括100个点，即1000个字节
}
protocol recv_nobus {
    segment boxing {parser: 'uint8', autovalue: 0} //0x01交流电压  0x02直流电压（60V） 0x03直流电压（300V）0x04电流
    segments data_text [100] {
        segment time {parser: 'uint64>', autovalue: 0} //采样序号
        segment data_u {parser: 'uint16>', autovalue: 0} //采样电压数据精确到0.01V
        segment data_i {parser: 'uint16>', autovalue: 0} //采样电流数据精确到0.1A
    }
}

